import asyncio
import streamlit as st
import pandas as pd
import sys
import os
from datetime import datetime

# Th√™m ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i v√†o sys.path ƒë·ªÉ c√≥ th·ªÉ import c√°c module t·ª´ th∆∞ m·ª•c hi·ªán t·∫°i
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.utils.multi_file_handler import MultiFileHandler
from src.utils.file_handler import extract_content
from graph.workflow import MultiFileWorkflow

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(
    page_title="Finance Report Analyst",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

def local_css():
    """Th√™m CSS t√πy ch·ªânh ƒë·ªÉ tƒÉng t√≠nh chuy√™n nghi·ªáp c·ªßa giao di·ªán"""
    st.markdown("""
    <style>
        /* M√†u s·∫Øc ch·ªß ƒë·∫°o - T√†i ch√≠nh */
        :root {
            --primary-color: #1a3a5f;         /* Xanh d∆∞∆°ng ƒë·∫≠m */
            --secondary-color: #4CAF50;       /* Xanh l√° - m√†u ti·ªÅn */
            --accent-color: #FFC107;          /* V√†ng - m√†u v√†ng kim */
            --text-color: #333333;            /* M√†u ch·ªØ ch√≠nh */
            --background-color: #f7f9fc;      /* N·ªÅn s√°ng chuy√™n nghi·ªáp */
            --card-bg-color: #ffffff;         /* M√†u n·ªÅn card */
            --border-radius: 8px;             /* Bo tr√≤n g√≥c nh·∫π */
            --box-shadow: 0 4px 12px rgba(0,0,0,0.1); /* ƒê·ªï b√≥ng tinh t·∫ø */
        }
        
        /* Resetters and global styles */
        .main .block-container {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }
        
        h1, h2, h3, h4, h5, h6 {
            color: var(--primary-color);
        }
        
        /* Header styling */
        .header-container {
            background: linear-gradient(135deg, var(--primary-color), #0f2a49);
            padding: 1.5rem;
            border-radius: var(--border-radius);
            color: white;
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 2rem;
            box-shadow: var(--box-shadow);
        }
        
        .logo-title-container {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .logo-image {
            width: 50px;
            height: 50px;
        }
        
        .app-title {
            font-size: 1.8rem;
            font-weight: 600;
            margin: 0;
        }
        
        .app-subtitle {
            font-size: 1rem;
            opacity: 0.8;
            margin-top: 0.5rem;
        }
        
        /* Card styling */
        .custom-card {
            background-color: var(--card-bg-color);
            border-radius: var(--border-radius);
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: var(--box-shadow);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .custom-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0,0,0,0.15);
        }
        
        /* Button styling */
        .stButton > button {
            background-color: var(--primary-color) !important;
            color: white !important;
            border: none !important;
            border-radius: var(--border-radius) !important;
            padding: 0.5rem 1rem !important;
            font-weight: 500 !important;
            transition: all 0.3s ease !important;
        }
        
        .stButton > button:hover {
            background-color: #0f2845 !important;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2) !important;
            transform: translateY(-2px) !important;
        }
        
        /* File upload area */
        .upload-container {
            text-align: center;
            margin-bottom: 1rem;
        }
        
        .upload-info {
            font-size: 0.9rem; 
            color: #666;
            margin-bottom: 0.5rem;
        }
        
        /* File item styling */
        .file-item-container {
            background-color: var(--card-bg-color);
            border: 1px solid #e0e0e0;
            border-left: 4px solid var(--secondary-color);
            border-radius: var(--border-radius);
            padding: 1rem;
            margin: 0.75rem 0;
            transition: all 0.2s ease;
        }
        
        .file-item-container:hover {
            border-left-color: var(--accent-color);
            box-shadow: var(--box-shadow);
        }
        
        .file-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .file-item-title {
            font-weight: 500;
            color: var(--primary-color);
        }
        
        .file-item-meta {
            font-size: 0.85rem;
            color: #666;
            margin-top: 0.25rem;
        }
        
        /* Results section styling */
        .results-section {
            margin-top: 2rem;
        }
        
        .result-header {
            color: var(--primary-color);
            border-bottom: 2px solid var(--secondary-color);
            padding-bottom: 0.5rem;
            margin-bottom: 1.5rem;
            font-size: 1.5rem;
            font-weight: 600;
        }
        
        .section-intro {
            color: #555;
            font-size: 0.95rem;
            margin-bottom: 1rem;
        }
        
        /* Result card styling */
        .result-card {
            background-color: var(--card-bg-color);
            border-radius: var(--border-radius);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--box-shadow);
            border-left: 4px solid var(--secondary-color);
            transition: all 0.3s ease;
        }
        
        .result-card:hover {
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }
        
        .result-title {
            color: var(--primary-color);
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.75rem;
        }
        
        /* Progress bar */
        .stProgress > div > div {
            background-color: var(--secondary-color) !important;
        }
        
        /* Sidebar */
        .css-18e3th9 {
            padding-top: 0;
        }
        
        section[data-testid="stSidebar"] {
            background-color: var(--background-color);
            border-right: 1px solid #e0e0e0;
        }
        
        section[data-testid="stSidebar"] > div {
            padding-top: 5rem;
            background-image: linear-gradient(135deg, var(--primary-color), #0f2a49);
            background-size: 100% 4rem;
            background-repeat: no-repeat;
        }
        
        /* Tabs styling */
        .stTabs [data-baseweb="tab-list"] {
            gap: 1rem;
        }
        
        .stTabs [data-baseweb="tab"] {
            height: 4rem;
            white-space: pre-wrap;
            border-radius: var(--border-radius);
            background-color: var(--background-color);
            border: 1px solid #e0e0e0;
            color: var(--text-color);
        }
        
        .stTabs [aria-selected="true"] {
            background-color: var(--primary-color) !important;
            color: white !important;
            border: 1px solid var(--primary-color) !important;
        }
        
        /* File preview */
        .preview-header {
            font-weight: 600;
            font-size: 1rem;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
            border-bottom: 1px solid #e0e0e0;
            padding-bottom: 0.5rem;
        }
        
        /* Date display */
        .date-display {
            color: #666;
            font-size: 0.9rem;
            text-align: right;
            margin-top: 0.5rem;
        }
        
        /* Footer */
        .footer {
            margin-top: 3rem;
            text-align: center;
            color: #666;
            font-size: 0.85rem;
            padding-top: 1rem;
            border-top: 1px solid #e0e0e0;
        }
        
        /* Synthesis report styling */
        .synthesis-report h1 {
            color: var(--primary-color);
            font-size: 1.8rem;
            border-bottom: 2px solid var(--secondary-color);
            padding-bottom: 0.5rem;
            margin-top: 2rem;
            margin-bottom: 1rem;
        }

        .synthesis-report h2 {
            color: var(--primary-color);
            font-size: 1.5rem;
            margin-top: 1.5rem;
            margin-bottom: 1rem;
        }

        .synthesis-report h3 {
            color: var(--primary-color);
            font-size: 1.3rem;
            margin-top: 1.2rem;
            margin-bottom: 0.8rem;
        }

        .synthesis-report ul, .synthesis-report ol {
            margin-bottom: 1rem;
            padding-left: 1.5rem;
        }
        
        /* Synthesis section cards */
        .synthesis-section-card {
            background-color: var(--card-bg-color);
            border-radius: var(--border-radius);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--box-shadow);
            border-left: 4px solid var(--primary-color);
        }
    </style>
    """, unsafe_allow_html=True)

def header_with_logo():
    """Hi·ªÉn th·ªã header v·ªõi logo v√† ti√™u ƒë·ªÅ"""
    
    # Hi·ªÉn th·ªã gi·ªù hi·ªán t·∫°i
    current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    
    # Render header v·ªõi logo v√† ti√™u ƒë·ªÅ
    st.markdown(f'''
    <div class="header-container">
        <div class="logo-title-container">
            <h1 class="app-title">Finance Report Analyst</h1>
            <div class="app-subtitle">Ph√¢n t√≠ch b√°o c√°o t√†i ch√≠nh chuy√™n nghi·ªáp</div>
        </div>
        <div class="date-display">{current_time}</div>
    </div>
    ''', unsafe_allow_html=True)

def update_menu():
    """C·∫≠p nh·∫≠t menu active trong session state"""
    st.session_state.active_menu = st.session_state.menu_choice

def sidebar_navigation():
    """Hi·ªÉn th·ªã sidebar ƒëi·ªÅu h∆∞·ªõng"""
    # Kh·ªüi t·∫°o active_menu n·∫øu ch∆∞a c√≥
    if 'active_menu' not in st.session_state:
        st.session_state.active_menu = "üì§ Upload & Ph√¢n t√≠ch"
        
    with st.sidebar:
        st.markdown(
            "<div style='height: 4rem;'></div>",
            unsafe_allow_html=True
        )
        
        st.markdown("### üìä Finance Report Analyst")
        st.markdown("---")
        
        # Menu tabs - ch·ªâ c√≤n 2 tab
        st.markdown("#### üìã Menu")
        menu = st.radio(
            "Ch·ªçn ch·ª©c nƒÉng:",
            ["üì§ Upload & Ph√¢n t√≠ch", "üìà K·∫øt qu·∫£"],
            index=0 if st.session_state.active_menu == "üì§ Upload & Ph√¢n t√≠ch" else 1,
            key="menu_choice",
            on_change=update_menu
        )
        
        st.markdown("---")
        
        # Th√¥ng tin v·ªÅ ch·ª©c nƒÉng
        with st.expander("‚ÑπÔ∏è Th√¥ng tin"):
            st.markdown("""
            **Finance Report Analyst** gi√∫p ph√¢n t√≠ch b√°o c√°o t√†i ch√≠nh t·ª´ nhi·ªÅu ƒë·ªãnh d·∫°ng file.
            
            **H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng:**
            - CSV
            - Excel (xls, xlsx)
            - PDF
            
            **Phi√™n b·∫£n:** 1.0.0
            """)
        
        # G√≥c tr·ª£ gi√∫p
        with st.expander("‚ùì Tr·ª£ gi√∫p"):
            st.markdown("""
            **C√°ch s·ª≠ d·ª•ng:**
            1. T·∫£i l√™n c√°c file t√†i ch√≠nh c·∫ßn ph√¢n t√≠ch
            2. Nh·∫≠p y√™u c·∫ßu ph√¢n t√≠ch
            3. Nh·∫•n n√∫t "Ph√¢n t√≠ch"
            4. Xem k·∫øt qu·∫£ chi ti·∫øt t·ª´ng file
            
            C√≥ th·ªÉ ph√¢n t√≠ch nhi·ªÅu file c√πng l√∫c.
            """)
    
    return st.session_state.active_menu

def enhance_upload_section():
    """Hi·ªÉn th·ªã ph·∫ßn upload file c·∫£i ti·∫øn"""
    st.markdown("<h2>T·∫£i l√™n b√°o c√°o t√†i ch√≠nh</h2>", unsafe_allow_html=True)
    
    # Th√¥ng tin v·ªÅ ƒë·ªãnh d·∫°ng file h·ªó tr·ª£
    st.markdown("""
    <div class="upload-container">
        <div class="upload-info">
            <span style="margin-right: 15px;"><i class="fas fa-file-excel"></i> Excel (xlsx, xls)</span>
            <span style="margin-right: 15px;"><i class="fas fa-file-csv"></i> CSV</span>
            <span><i class="fas fa-file-pdf"></i> PDF</span>
        </div>
    </div>
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    """, unsafe_allow_html=True)
    
    # Widget upload file
    uploaded_files = st.file_uploader(
        "K√©o th·∫£ file v√†o ƒë√¢y ho·∫∑c nh·∫•p ƒë·ªÉ ch·ªçn file",
        type=["csv", "xlsx", "xls", "pdf"],
        accept_multiple_files=True,
        key="file_uploader"
    )
    
    return uploaded_files

def display_file_info(uploaded_files, multi_file_handler):
    """Hi·ªÉn th·ªã th√¥ng tin c√°c file ƒë√£ t·∫£i l√™n"""
    if not uploaded_files:
        return
    
    # X√≥a files ƒë√£ t·∫£i l√™n tr∆∞·ªõc ƒë√≥
    multi_file_handler.clear()
    
    # Header cho ph·∫ßn file
    st.markdown("<h3>Files ƒë√£ t·∫£i l√™n</h3>", unsafe_allow_html=True)
    
    # Hi·ªÉn th·ªã t·ª´ng file
    for uploaded_file in uploaded_files:
        # X√°c ƒë·ªãnh icon v√† m√†u d·ª±a tr√™n lo·∫°i file
        if uploaded_file.name.endswith('.pdf'):
            icon_class = "fas fa-file-pdf"
            icon_color = "#FF5252"
        elif uploaded_file.name.endswith('.csv'):
            icon_class = "fas fa-file-csv" 
            icon_color = "#2196F3"
        else:  # Excel
            icon_class = "fas fa-file-excel"
            icon_color = "#4CAF50"
        
        # Th√™m file v√†o handler
        file_id = multi_file_handler.add_file(uploaded_file, uploaded_file.name)
        
        # T√≠nh k√≠ch th∆∞·ªõc file (KB/MB)
        size_kb = uploaded_file.size / 1024
        size_text = f"{size_kb:.1f} KB" if size_kb < 1024 else f"{size_kb/1024:.2f} MB"
        
        # Hi·ªÉn th·ªã th√¥ng tin file
        with st.container():
            st.markdown(f"""
            <div class="file-item-container">
                <div class="file-item-header">
                    <div>
                        <i class="{icon_class}" style="color: {icon_color}; margin-right: 8px;"></i>
                        <span class="file-item-title">{uploaded_file.name}</span>
                    </div>
                </div>
                <div class="file-item-meta">
                    <span>{uploaded_file.type} ‚Ä¢ {size_text}</span>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Hi·ªÉn th·ªã xem tr∆∞·ªõc n·ªôi dung trong expander
            with st.expander("Xem tr∆∞·ªõc n·ªôi dung"):
                display_file_preview(uploaded_file)

def display_file_preview(uploaded_file):
    """Hi·ªÉn th·ªã xem tr∆∞·ªõc n·ªôi dung file"""
    try:
        content = extract_content(uploaded_file, uploaded_file.name)
        
        if uploaded_file.name.endswith('.pdf'):
            st.markdown(f"<div class='preview-header'><i class='fas fa-file-pdf'></i> T√†i li·ªáu PDF</div>", unsafe_allow_html=True)
            preview_content = content[:5000] + ("..." if len(content) > 5000 else "")
            st.text_area("N·ªôi dung PDF", value=preview_content, height=250)
            st.info(f"Hi·ªÉn th·ªã {min(5000, len(content))} k√Ω t·ª± ƒë·∫ßu ti√™n (t·ªïng {len(content)} k√Ω t·ª±).")
        else:
            st.markdown(f"<div class='preview-header'><i class='fas fa-table'></i> D·ªØ li·ªáu b·∫£ng</div>", unsafe_allow_html=True)
            
            if isinstance(content, list) and len(content) > 1:
                headers = content[0]
                data = content[1:min(len(content), 11)]  # Gi·ªõi h·∫°n 10 d√≤ng d·ªØ li·ªáu
                
                # T·∫°o DataFrame t·ª´ d·ªØ li·ªáu
                df = pd.DataFrame(data, columns=headers)
                st.dataframe(df, use_container_width=True)
                
                # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ d·ªØ li·ªáu
                st.info(f"Hi·ªÉn th·ªã {len(data)} trong t·ªïng s·ªë {len(content)-1} d√≤ng d·ªØ li·ªáu.")
            else:
                # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng ph·∫£i d·∫°ng b·∫£ng ho·∫∑c d·ªØ li·ªáu kh√¥ng ƒë·ªß
                st.dataframe(pd.DataFrame(content), use_container_width=True)
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã xem tr∆∞·ªõc: {str(e)}")

def display_synthesis_report(synthesis_result):
    """Hi·ªÉn th·ªã to√†n b·ªô b√°o c√°o t·ªïng h·ª£p"""
    if not synthesis_result:
        st.info("üìã Ch∆∞a c√≥ k·∫øt qu·∫£ t·ªïng h·ª£p. H√£y th·ª≠ ph√¢n t√≠ch l·∫°i c√°c b√°o c√°o.")
        return
    
    # Hi·ªÉn th·ªã to√†n b·ªô b√°o c√°o t·ªïng h·ª£p
    st.markdown('<div class="synthesis-report">', unsafe_allow_html=True)
    st.markdown(synthesis_result)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Th√™m n√∫t ƒë·ªÉ xu·∫•t b√°o c√°o t·ªïng h·ª£p
    st.markdown("<br>", unsafe_allow_html=True)
    col1, col2, col3 = st.columns([1, 1, 1])
    with col2:
        if st.button("üì• Xu·∫•t b√°o c√°o t·ªïng h·ª£p PDF", use_container_width=True):
            st.info("ƒêang chu·∫©n b·ªã b√°o c√°o PDF... T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.")

def display_analysis_results(result):
    """Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch d∆∞·ªõi d·∫°ng card view chuy√™n nghi·ªáp"""
    if not result or not result.get("files", None):
        st.warning("Kh√¥ng c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch ƒë·ªÉ hi·ªÉn th·ªã.")
        return
    
    st.markdown("<h2 class='result-header'>K·∫øt Qu·∫£ Ph√¢n T√≠ch</h2>", unsafe_allow_html=True)
    
    # Tabs cho c√°c c√°ch hi·ªÉn th·ªã kh√°c nhau
    tab_chi_tiet, tab_so_sanh, tab_tom_tat = st.tabs([
        "üìÑ Chi ti·∫øt t·ª´ng b√°o c√°o", 
        "üìä B√°o c√°o tr·ª±c quan", 
        "üìã T√≥m t·∫Øt t·ªïng h·ª£p"
    ])
    
    with tab_chi_tiet:
        st.markdown("<div class='section-intro'>Chi ti·∫øt k·∫øt qu·∫£ ph√¢n t√≠ch c·ªßa t·ª´ng b√°o c√°o t√†i ch√≠nh.</div>", unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ng file
        for i, file in enumerate(result.get("files", [])):
            if file.get("analysis", None):
                # X√°c ƒë·ªãnh icon d·ª±a tr√™n lo·∫°i file
                if file['file_name'].endswith('.pdf'):
                    file_icon = "fas fa-file-pdf"
                    file_color = "#FF5252"
                elif file['file_name'].endswith('.csv'):
                    file_icon = "fas fa-file-csv"
                    file_color = "#2196F3"
                else:  # Excel
                    file_icon = "fas fa-file-excel"
                    file_color = "#4CAF50"
                
                # Hi·ªÉn th·ªã th√¥ng tin file
                st.markdown(f"""
                <div class="result-card">
                    <div style="display: flex; align-items: center; margin-bottom: 1rem;">
                        <i class="{file_icon}" style="font-size: 24px; margin-right: 15px; color: {file_color};"></i>
                        <div style="font-weight: 600; font-size: 1.2rem;">{file['file_name']}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # Tabs b√™n trong card
                file_analysis = file["analysis"]
                inner_tab1, inner_tab2 = st.tabs(["üìù T√≥m t·∫Øt", "üìä Chi ti·∫øt ph√¢n t√≠ch"])
                
                with inner_tab1:
                    st.markdown(f"<div class='result-title'>Ti√™u ƒë·ªÅ b√°o c√°o</div>", unsafe_allow_html=True)
                    st.markdown(file_analysis.heading)
                    
                    st.markdown(f"<div class='result-title'>T√≥m t·∫Øt n·ªôi dung</div>", unsafe_allow_html=True)
                    st.markdown(file_analysis.summary)
                
                with inner_tab2:
                    st.markdown(f"<div class='result-title'>Chi ti·∫øt ph√¢n t√≠ch</div>", unsafe_allow_html=True)
                    st.markdown(file_analysis.analysis_detail)
                
                st.markdown("<hr>", unsafe_allow_html=True)
            else:
                display_error_card(i, file)
    
    with tab_so_sanh:
        st.markdown("<div class='section-intro'>Ph√¢n t√≠ch so s√°nh gi·ªØa c√°c b√°o c√°o t√†i ch√≠nh.</div>", unsafe_allow_html=True)
        st.info("üìà T√≠nh nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. S·∫Ω s·ªõm ra m·∫Øt trong phi√™n b·∫£n ti·∫øp theo!")
    
    with tab_tom_tat:
        st.markdown("<div class='section-intro'>B√°o c√°o t·ªïng h·ª£p t·ª´ t·∫•t c·∫£ c√°c k·∫øt qu·∫£ ph√¢n t√≠ch.</div>", unsafe_allow_html=True)
        
        # Ki·ªÉm tra k·∫øt qu·∫£ t·ªïng h·ª£p
        if result.get("synthesis_result"):
            display_synthesis_report(result["synthesis_result"])
        else:
            st.info("üìã Ch∆∞a c√≥ b√°o c√°o t·ªïng h·ª£p. Vui l√≤ng ch·∫°y l·∫°i ph√¢n t√≠ch ƒë·ªÉ t·∫°o b√°o c√°o t·ªïng h·ª£p.")

def display_error_card(index, file):
    """Hi·ªÉn th·ªã card l·ªói khi kh√¥ng th·ªÉ ph√¢n t√≠ch file"""
    file_name = file.get('file_name', f'File {index+1}')
    
    st.markdown(f"""
    <div class="custom-card" style="border-left: 4px solid #FF5252;">
        <div style="display: flex; align-items: center; margin-bottom: 1rem;">
            <i class="fas fa-exclamation-circle" style="font-size: 24px; margin-right: 15px; color: #FF5252;"></i>
            <div style="font-weight: 600; font-size: 1.2rem;">{file_name}</div>
        </div>
        <div style="color: #666;">
            Kh√¥ng th·ªÉ ph√¢n t√≠ch file n√†y. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng v√† th·ª≠ l·∫°i.
        </div>
    </div>
    """, unsafe_allow_html=True)


def display_footer():
    """Hi·ªÉn th·ªã footer"""
    st.markdown("""
    <div class="footer">
        <p>Finance Report Analyst v1.0.0 | ¬© 2025 | Developed by Finance Analytics Team</p>
    </div>
    """, unsafe_allow_html=True)

def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    # Th√™m CSS t√πy ch·ªânh
    local_css()
    
    # Hi·ªÉn th·ªã header
    header_with_logo()
    
    # Hi·ªÉn th·ªã sidebar navigation
    active_menu = sidebar_navigation()
    
    # Kh·ªüi t·∫°o session state
    if 'multi_file_handler' not in st.session_state:
        st.session_state.multi_file_handler = MultiFileHandler()
    if 'analysis_results' not in st.session_state:
        st.session_state.analysis_results = {}
    
    # X·ª≠ l√Ω theo menu ƒë√£ ch·ªçn - ch·ªâ c√≤n 2 tab
    if active_menu == "üì§ Upload & Ph√¢n t√≠ch":
        # Hi·ªÉn th·ªã ph·∫ßn t·∫£i l√™n file
        uploaded_files = enhance_upload_section()
        
        # Hi·ªÉn th·ªã th√¥ng tin file ƒë√£ t·∫£i l√™n
        if uploaded_files:
            display_file_info(uploaded_files, st.session_state.multi_file_handler)
        
        # Y√™u c·∫ßu ph√¢n t√≠ch
        st.markdown("<h3>Y√™u c·∫ßu ph√¢n t√≠ch</h3>", unsafe_allow_html=True)
        user_input = st.text_area(
            "Nh·∫≠p y√™u c·∫ßu ph√¢n t√≠ch c·ª• th·ªÉ (tu·ª≥ ch·ªçn):",
            placeholder="V√≠ d·ª•: Ph√¢n t√≠ch tƒÉng tr∆∞·ªüng doanh thu theo qu√Ω v√† so s√°nh v·ªõi c√πng k·ª≥ nƒÉm tr∆∞·ªõc...",
            height=100
        )
        
        # N√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch
        analyze_col1, analyze_col2 = st.columns([3, 1])
        with analyze_col2:
            analyze_button = st.button("üîç Ph√¢n t√≠ch t·∫•t c·∫£ files", use_container_width=True)
        
        if analyze_button:
            files = st.session_state.multi_file_handler.get_files()
            
            if not files:
                st.error("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n √≠t nh·∫•t m·ªôt file ƒë·ªÉ ph√¢n t√≠ch")
            else:
                # T·∫°o workflow
                workflow = MultiFileWorkflow().compile()
                
                with st.spinner(f"ƒêang ph√¢n t√≠ch {len(files)} file..."):
                    # Hi·ªÉn th·ªã thanh ti·∫øn tr√¨nh
                    progress_text = st.empty()
                    progress_bar = st.progress(0)
                    
                    # Ch√∫ng ta c·∫ßn theo d√µi ti·∫øn tr√¨nh ph√¢n t√≠ch
                    total_files = len(files)
                    
                    # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o cho workflow
                    input_state = {
                        "files": files,
                        "current_file_index": 0,
                    }
                    
                    # Hi·ªÉn th·ªã b·∫Øt ƒë·∫ßu ph√¢n t√≠ch
                    progress_text.text(f"ƒêang b·∫Øt ƒë·∫ßu ph√¢n t√≠ch {total_files} file...")
                    progress_bar.progress(0)
                    
                    result = None
                    # ƒê·ªãnh nghƒ©a h√†m async ƒë·ªÉ ch·∫°y workflow
                    async def run_analysis(wf, state):
                        return await wf.ainvoke(state)
                    
                    # Ch·∫°y workflow
                    try:
                        # Execute the workflow
                        result = asyncio.run(run_analysis(workflow, input_state))
                        
                        # L∆∞u k·∫øt qu·∫£
                        st.session_state.analysis_results = result
                        
                        # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh ho√†n th√†nh
                        progress_bar.progress(1.0)
                        progress_text.text(f"‚úÖ ƒê√£ ho√†n th√†nh ph√¢n t√≠ch {total_files} file!")
                        
                        # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                        st.success(f"‚úÖ ƒê√£ ho√†n th√†nh ph√¢n t√≠ch {len(files)} file t√†i ch√≠nh!")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£
                        display_analysis_results(result)
                        
                    except Exception as e:
                        st.error(f"‚ùå L·ªói khi ph√¢n t√≠ch: {str(e)}")
                        st.write("Chi ti·∫øt l·ªói:", e)
    
    elif active_menu == "üìà K·∫øt qu·∫£":
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ ph√¢n t√≠ch ƒë√£ l∆∞u trong session
        if st.session_state.analysis_results:
            display_analysis_results(st.session_state.analysis_results)
        else:
            st.info("üëÜ B·∫°n ch∆∞a th·ª±c hi·ªán ph√¢n t√≠ch n√†o. Vui l√≤ng chuy·ªÉn ƒë·∫øn tab 'Upload & Ph√¢n t√≠ch' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
            
            # N√∫t chuy·ªÉn ƒë·∫øn tab ph√¢n t√≠ch - ƒë√£ s·ª≠a ƒë·ªÉ kh√¥ng d√πng experimental_rerun
            if st.button("üîç ƒêi ƒë·∫øn ph·∫ßn Ph√¢n t√≠ch"):
                st.session_state.active_menu = "üì§ Upload & Ph√¢n t√≠ch"
    
    # Hi·ªÉn th·ªã footer
    display_footer()

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    main()
